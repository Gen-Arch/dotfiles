#[[plugins]]
#repo      = 'prabirshrestha/vim-lsp'
#on_event  = 'InsertEnter'
#
#[[plugins]]
#repo      = 'prabirshrestha/async.vim'
#on_source = "vim-lsp"
#
#[[plugins]]
#repo      = 'mattn/vim-lsp-settings'
#on_source = ["vim-lsp"]
#
#[[plugins]]
#repo      = 'prabirshrestha/asyncomplete.vim'
#on_source = "vim-lsp"
#hook_source = '''
#inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
#inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
#inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
#'''
#
#[[plugins]]
#repo      = 'prabirshrestha/asyncomplete-lsp.vim'
#on_source = "vim-lsp"

[[plugins]]
repo      = 'prabirshrestha/vim-lsp'

[[plugins]]
repo      = 'prabirshrestha/async.vim'

[[plugins]]
repo      = 'prabirshrestha/asyncomplete.vim'
hook_add  = '''
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"


let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo      = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo      = 'mattn/vim-lsp-settings'
